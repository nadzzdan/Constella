---
- name: Windows VM Change Monitoring
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: yes
  become: no
  
  tasks:
    - name: Get Recent System Events
      win_shell: |
        Write-Host "=== RECENT SYSTEM EVENTS ==="
        Write-Host "Recent System Events (Last 24 hours):"
        
        # Get events from the last 24 hours
        $startTime = (Get-Date).AddHours(-24)
        
        # System events
        $systemEvents = Get-WinEvent -FilterHashtable @{
          LogName = 'System'
          StartTime = $startTime
        } -ErrorAction SilentlyContinue | Select-Object -First 20
        
        foreach ($event in $systemEvents) {
          Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] $($event.LevelDisplayName): $($event.Message -replace "`n", " " -replace "`r", " ")"
        }
        
        Write-Host ""
        Write-Host "Recent Application Events:"
        $appEvents = Get-WinEvent -FilterHashtable @{
          LogName = 'Application'
          StartTime = $startTime
        } -ErrorAction SilentlyContinue | Select-Object -First 15
        
        foreach ($event in $appEvents) {
          Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] $($event.LevelDisplayName): $($event.Message -replace "`n", " " -replace "`r", " ")"
        }
      register: system_events_info
      changed_when: false

    - name: Get Recent File System Changes
      win_shell: |
        Write-Host "=== RECENT FILE SYSTEM CHANGES ==="
        
        # Get recent file changes in common directories
        $directories = @(
          "C:\Program Files",
          "C:\Program Files (x86)",
          "C:\Users",
          "C:\Windows\Temp",
          "C:\Temp"
        )
        
        $startTime = (Get-Date).AddHours(-24)
        
        foreach ($dir in $directories) {
          if (Test-Path $dir) {
            Write-Host "Recent changes in ${dir}:"
            try {
              $recentFiles = Get-ChildItem -Path $dir -Recurse -ErrorAction SilentlyContinue | 
                Where-Object {$_.LastWriteTime -gt $startTime} | 
                Sort-Object LastWriteTime -Descending | 
                Select-Object -First 10
              
              foreach ($file in $recentFiles) {
                $size = if ($file.Length) { [math]::Round($file.Length / 1KB, 2) } else { "0" }
                Write-Host "  [$($file.LastWriteTime.ToString('yyyy-MM-dd HH:mm:ss'))] $($file.FullName) (Size: ${size}KB)"
              }
            } catch {
              Write-Host "  Access denied or directory not accessible"
            }
            Write-Host ""
          }
        }
      register: file_changes_info
      changed_when: false

    - name: Get Recent Software Installations
      win_shell: |
        Write-Host "=== RECENT SOFTWARE INSTALLATIONS ==="
        
        # Check for recent software installations
        $startTime = (Get-Date).AddDays(-7)
        
        # Check Programs and Features
        Write-Host "Recently Installed Programs:"
        try {
          $installedPrograms = Get-WmiObject -Class Win32_Product | 
            Where-Object {$_.InstallDate -and $_.InstallDate -gt $startTime} | 
            Sort-Object InstallDate -Descending | 
            Select-Object -First 10
          
          foreach ($program in $installedPrograms) {
            $installDate = [Management.ManagementDateTimeConverter]::ToDateTime($program.InstallDate)
            Write-Host "  [$($installDate.ToString('yyyy-MM-dd HH:mm:ss'))] $($program.Name) v$($program.Version)"
          }
        } catch {
          Write-Host "  Unable to retrieve installed programs"
        }
        
        Write-Host ""
        Write-Host "Recent Windows Updates:"
        try {
          $updates = Get-HotFix | 
            Where-Object {$_.InstalledOn -gt $startTime} | 
            Sort-Object InstalledOn -Descending | 
            Select-Object -First 10
          
          foreach ($update in $updates) {
            Write-Host "  [$($update.InstalledOn.ToString('yyyy-MM-dd HH:mm:ss'))] $($update.HotFixID) - $($update.Description)"
          }
        } catch {
          Write-Host "  Unable to retrieve Windows updates"
        }
      register: software_installations_info
      changed_when: false

    - name: Get Recent User Activity
      win_shell: |
        Write-Host "=== RECENT USER ACTIVITY ==="
        
        $startTime = (Get-Date).AddHours(-24)
        
        # Check for recent user logins
        Write-Host "Recent User Logins:"
        try {
          $loginEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'Security'
            ID = 4624  # Successful logon
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 10
          
          foreach ($event in $loginEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] User login: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  Unable to retrieve login events"
        }
        
        Write-Host ""
        Write-Host "Recent User Logouts:"
        try {
          $logoutEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'Security'
            ID = 4634  # Logoff
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 10
          
          foreach ($event in $logoutEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] User logout: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  Unable to retrieve logout events"
        }
      register: user_activity_info
      changed_when: false

    - name: Get Recent Service Changes
      win_shell: |
        Write-Host "=== RECENT SERVICE CHANGES ==="
        
        # Check for recent service state changes
        $startTime = (Get-Date).AddHours(-24)
        
        Write-Host "Recent Service State Changes:"
        try {
          $serviceEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'System'
            ID = @(7036, 7040, 7041, 7042, 7043, 7044, 7045)  # Service events
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 15
          
          foreach ($event in $serviceEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] Service change: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  Unable to retrieve service events"
        }
        
        Write-Host ""
        Write-Host "Currently Running Services:"
        $runningServices = Get-Service | Where-Object {$_.Status -eq "Running"} | Sort-Object Name
        Write-Host "  Total running services: $($runningServices.Count)"
        $runningServices | Select-Object -First 10 | ForEach-Object {
          Write-Host "    $($_.Name): $($_.DisplayName)"
        }
      register: service_changes_info
      changed_when: false

    - name: Get Recent Process Changes
      win_shell: |
        Write-Host "=== RECENT PROCESS CHANGES ==="
        
        # Get currently running processes
        $currentProcesses = Get-Process | Select-Object Name, Id, StartTime | Sort-Object StartTime -Descending
        
        Write-Host "Recently Started Processes (Last 24 hours):"
        $startTime = (Get-Date).AddHours(-24)
        $recentProcesses = $currentProcesses | Where-Object {$_.StartTime -and $_.StartTime -gt $startTime} | Select-Object -First 15
        
        foreach ($process in $recentProcesses) {
          Write-Host "  [$($process.StartTime.ToString('yyyy-MM-dd HH:mm:ss'))] $($process.Name) (PID: $($process.Id))"
        }
        
        Write-Host ""
        Write-Host "Process Summary:"
        Write-Host "  Total running processes: $($currentProcesses.Count)"
        Write-Host "  Processes started in last 24h: $($recentProcesses.Count)"
      register: process_changes_info
      changed_when: false

    - name: Get Recent Network Activity
      win_shell: |
        Write-Host "=== RECENT NETWORK ACTIVITY ==="
        
        # Check for recent network connections
        Write-Host "Recent Network Connections:"
        try {
          $connections = Get-NetTCPConnection -State Established | 
            Where-Object {$_.CreationTime -gt (Get-Date).AddHours(-24)} | 
            Sort-Object CreationTime -Descending | 
            Select-Object -First 15
          
          foreach ($conn in $connections) {
            $processName = "Unknown"
            try {
              $process = Get-Process -Id $conn.OwningProcess -ErrorAction SilentlyContinue
              if ($process) {
                $processName = $process.ProcessName
              }
            } catch {}
            
            Write-Host "  [$($conn.CreationTime.ToString('yyyy-MM-dd HH:mm:ss'))] $processName -> $($conn.RemoteAddress):$($conn.RemotePort)"
          }
        } catch {
          Write-Host "  Unable to retrieve network connections"
        }
      register: network_activity_info
      changed_when: false

    - name: Get System Configuration Changes
      win_shell: |
        Write-Host "=== SYSTEM CONFIGURATION CHANGES ==="
        
        $startTime = (Get-Date).AddHours(-24)
        
        # Check for system configuration changes
        Write-Host "Recent System Configuration Events:"
        try {
          $configEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'System'
            ID = @(6005, 6006, 6008, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 12
