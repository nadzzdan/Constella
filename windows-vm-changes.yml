---
- name: Windows VM Change Monitoring
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: yes
  become: no
  
  tasks:
    - name: Get Recent System Events
      win_shell: |
        Write-Host "=== RECENT SYSTEM EVENTS ==="
        Write-Host "Recent System Events (Last 24 hours):"
        
        # Get events from the last 24 hours
        $startTime = (Get-Date).AddHours(-24)
        
        # System events
        $systemEvents = Get-WinEvent -FilterHashtable @{
          LogName = 'System'
          StartTime = $startTime
        } -ErrorAction SilentlyContinue | Select-Object -First 20
        
        foreach ($event in $systemEvents) {
          Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] $($event.LevelDisplayName): $($event.Message -replace "`n", " " -replace "`r", " ")"
        }
        
        Write-Host ""
        Write-Host "Recent Application Events:"
        $appEvents = Get-WinEvent -FilterHashtable @{
          LogName = 'Application'
          StartTime = $startTime
        } -ErrorAction SilentlyContinue | Select-Object -First 15
        
        foreach ($event in $appEvents) {
          Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] $($event.LevelDisplayName): $($event.Message -replace "`n", " " -replace "`r", " ")"
        }
      register: system_events_info
      changed_when: false

    - name: Get Recent File System Changes
      win_shell: |
        Write-Host "=== RECENT FILE SYSTEM CHANGES ==="
        
        # Get recent file changes in common directories
        $directories = @(
          "C:\Program Files",
          "C:\Program Files (x86)",
          "C:\Users",
          "C:\Windows\Temp",
          "C:\Temp"
        )
        
        $startTime = (Get-Date).AddHours(-24)
        
        foreach ($dir in $directories) {
          if (Test-Path $dir) {
            Write-Host "Recent changes in ${dir}:"
            try {
              $recentFiles = Get-ChildItem -Path $dir -Recurse -ErrorAction SilentlyContinue | 
                Where-Object {$_.LastWriteTime -gt $startTime} | 
                Sort-Object LastWriteTime -Descending | 
                Select-Object -First 10
              
              foreach ($file in $recentFiles) {
                $size = if ($file.Length) { [math]::Round($file.Length / 1KB, 2) } else { "0" }
                Write-Host "  [$($file.LastWriteTime.ToString('yyyy-MM-dd HH:mm:ss'))] $($file.FullName) (Size: ${size}KB)"
              }
            } catch {
              Write-Host "  Access denied or directory not accessible"
            }
            Write-Host ""
          }
        }
      register: file_changes_info
      changed_when: false

    - name: Get Recent Software Installations
      win_shell: |
        Write-Host "=== RECENT SOFTWARE INSTALLATIONS ==="
        
        # Check for recent software installations
        $startTime = (Get-Date).AddDays(-7)
        
        # Check Programs and Features
        Write-Host "Recently Installed Programs:"
        try {
          $installedPrograms = Get-WmiObject -Class Win32_Product | 
            Where-Object {$_.InstallDate -and $_.InstallDate -gt $startTime} | 
            Sort-Object InstallDate -Descending | 
            Select-Object -First 10
          
          foreach ($program in $installedPrograms) {
            $installDate = [Management.ManagementDateTimeConverter]::ToDateTime($program.InstallDate)
            Write-Host "  [$($installDate.ToString('yyyy-MM-dd HH:mm:ss'))] $($program.Name) v$($program.Version)"
          }
        } catch {
          Write-Host "  Unable to retrieve installed programs"
        }
        
        Write-Host ""
        Write-Host "Recent Windows Updates:"
        try {
          $updates = Get-HotFix | 
            Where-Object {$_.InstalledOn -gt $startTime} | 
            Sort-Object InstalledOn -Descending | 
            Select-Object -First 10
          
          foreach ($update in $updates) {
            Write-Host "  [$($update.InstalledOn.ToString('yyyy-MM-dd HH:mm:ss'))] $($update.HotFixID) - $($update.Description)"
          }
        } catch {
          Write-Host "  Unable to retrieve Windows updates"
        }
      register: software_installations_info
      changed_when: false

    - name: Get Recent User Activity
      win_shell: |
        Write-Host "=== RECENT USER ACTIVITY ==="
        
        $startTime = (Get-Date).AddHours(-24)
        
        # Check for recent user logins
        Write-Host "Recent User Logins:"
        try {
          $loginEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'Security'
            ID = 4624  # Successful logon
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 10
          
          foreach ($event in $loginEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] User login: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  Unable to retrieve login events"
        }
        
        Write-Host ""
        Write-Host "Recent User Logouts:"
        try {
          $logoutEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'Security'
            ID = 4634  # Logoff
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 10
          
          foreach ($event in $logoutEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] User logout: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  Unable to retrieve logout events"
        }
      register: user_activity_info
      changed_when: false

    - name: Get Recent Service Changes
      win_shell: |
        Write-Host "=== RECENT SERVICE CHANGES ==="
        
        # Check for recent service state changes
        $startTime = (Get-Date).AddHours(-24)
        
        Write-Host "Recent Service State Changes:"
        try {
          $serviceEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'System'
            ID = @(7036, 7040, 7041, 7042, 7043, 7044, 7045)  # Service events
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 15
          
          foreach ($event in $serviceEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] Service change: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  Unable to retrieve service events"
        }
        
        Write-Host ""
        Write-Host "Currently Running Services:"
        $runningServices = Get-Service | Where-Object {$_.Status -eq "Running"} | Sort-Object Name
        Write-Host "  Total running services: $($runningServices.Count)"
        $runningServices | Select-Object -First 10 | ForEach-Object {
          Write-Host "    $($_.Name): $($_.DisplayName)"
        }
      register: service_changes_info
      changed_when: false

    - name: Get Recent Process Changes
      win_shell: |
        Write-Host "=== RECENT PROCESS CHANGES ==="
        
        # Get currently running processes
        $currentProcesses = Get-Process | Select-Object Name, Id, StartTime | Sort-Object StartTime -Descending
        
        Write-Host "Recently Started Processes (Last 24 hours):"
        $startTime = (Get-Date).AddHours(-24)
        $recentProcesses = $currentProcesses | Where-Object {$_.StartTime -and $_.StartTime -gt $startTime} | Select-Object -First 15
        
        foreach ($process in $recentProcesses) {
          Write-Host "  [$($process.StartTime.ToString('yyyy-MM-dd HH:mm:ss'))] $($process.Name) (PID: $($process.Id))"
        }
        
        Write-Host ""
        Write-Host "Process Summary:"
        Write-Host "  Total running processes: $($currentProcesses.Count)"
        Write-Host "  Processes started in last 24h: $($recentProcesses.Count)"
      register: process_changes_info
      changed_when: false

    - name: Get Recent Network Activity
      win_shell: |
        Write-Host "=== RECENT NETWORK ACTIVITY ==="
        
        # Check for recent network connections
        Write-Host "Recent Network Connections:"
        try {
          $connections = Get-NetTCPConnection -State Established | 
            Where-Object {$_.CreationTime -gt (Get-Date).AddHours(-24)} | 
            Sort-Object CreationTime -Descending | 
            Select-Object -First 15
          
          foreach ($conn in $connections) {
            $processName = "Unknown"
            try {
              $process = Get-Process -Id $conn.OwningProcess -ErrorAction SilentlyContinue
              if ($process) {
                $processName = $process.ProcessName
              }
            } catch {}
            
            Write-Host "  [$($conn.CreationTime.ToString('yyyy-MM-dd HH:mm:ss'))] $processName -> $($conn.RemoteAddress):$($conn.RemotePort)"
          }
        } catch {
          Write-Host "  Unable to retrieve network connections"
        }
      register: network_activity_info
      changed_when: false
