---
- name: Windows VM Change Monitoring
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: yes
  become: no
  
  tasks:
    - name: Get Recent System Events
      win_shell: |
        Write-Host "=== RECENT SYSTEM EVENTS ==="
        Write-Host "Recent System Events (Last 24 hours):"
        
        # Get events from the last 24 hours
        $startTime = (Get-Date).AddHours(-24)
        
        # System events
        $systemEvents = Get-WinEvent -FilterHashtable @{
          LogName = 'System'
          StartTime = $startTime
        } -ErrorAction SilentlyContinue | Select-Object -First 20
        
        foreach ($event in $systemEvents) {
          Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] $($event.LevelDisplayName): $($event.Message -replace "`n", " " -replace "`r", " ")"
        }
        
        Write-Host ""
        Write-Host "Recent Application Events:"
        $appEvents = Get-WinEvent -FilterHashtable @{
          LogName = 'Application'
          StartTime = $startTime
        } -ErrorAction SilentlyContinue | Select-Object -First 15
        
        foreach ($event in $appEvents) {
          Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] $($event.LevelDisplayName): $($event.Message -replace "`n", " " -replace "`r", " ")"
        }
      register: system_events_info
      changed_when: false

    - name: Get Recent File System Changes
      win_shell: |
        Write-Host "=== RECENT FILE SYSTEM CHANGES ==="
        
        # Get recent file changes in common directories
        $directories = @(
          "C:\Program Files",
          "C:\Program Files (x86)",
          "C:\Users",
          "C:\Windows\Temp",
          "C:\Temp"
        )
        
        $startTime = (Get-Date).AddHours(-24)
        
        foreach ($dir in $directories) {
          if (Test-Path $dir) {
            Write-Host "Recent changes in $dir:"
            try {
              $recentFiles = Get-ChildItem -Path $dir -Recurse -ErrorAction SilentlyContinue | 
                Where-Object {$_.LastWriteTime -gt $startTime} | 
                Sort-Object LastWriteTime -Descending | 
                Select-Object -First 10
              
              foreach ($file in $recentFiles) {
                $size = if ($file.Length) { [math]::Round($file.Length / 1KB, 2) } else { "0" }
                Write-Host "  [$($file.LastWriteTime.ToString('yyyy-MM-dd HH:mm:ss'))] $($file.FullName) (Size: ${size}KB)"
              }
            } catch {
              Write-Host "  Access denied or directory not accessible"
            }
            Write-Host ""
          }
        }
      register: file_changes_info
      changed_when: false

    - name: Get Recent Registry Changes
      win_shell: |
        Write-Host "=== RECENT REGISTRY CHANGES ==="
        Write-Host "Note: Registry change monitoring requires advanced auditing"
        Write-Host "Checking for recent registry modifications..."
        
        # Check for recent registry modifications (if auditing is enabled)
        $startTime = (Get-Date).AddHours(-24)
        
        try {
          $registryEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'Security'
            ID = 4657  # Registry value modified
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 10
          
          if ($registryEvents) {
            foreach ($event in $registryEvents) {
              Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] Registry modified: $($event.Message -replace "`n", " " -replace "`r", " ")"
            }
          } else {
            Write-Host "  No recent registry changes detected (auditing may not be enabled)"
          }
        } catch {
          Write-Host "  Registry change monitoring not available"
        }
      register: registry_changes_info
      changed_when: false

    - name: Get Recent Software Installations
      win_shell: |
        Write-Host "=== RECENT SOFTWARE INSTALLATIONS ==="
        
        # Check for recent software installations
        $startTime = (Get-Date).AddDays(-7)
        
        # Check Programs and Features
        Write-Host "Recently Installed Programs:"
        try {
          $installedPrograms = Get-WmiObject -Class Win32_Product | 
            Where-Object {$_.InstallDate -and $_.InstallDate -gt $startTime} | 
            Sort-Object InstallDate -Descending | 
            Select-Object -First 10
          
          foreach ($program in $installedPrograms) {
            $installDate = [Management.ManagementDateTimeConverter]::ToDateTime($program.InstallDate)
            Write-Host "  [$($installDate.ToString('yyyy-MM-dd HH:mm:ss'))] $($program.Name) v$($program.Version)"
          }
        } catch {
          Write-Host "  Unable to retrieve installed programs"
        }
        
        Write-Host ""
        Write-Host "Recent Windows Updates:"
        try {
          $updates = Get-HotFix | 
            Where-Object {$_.InstalledOn -gt $startTime} | 
            Sort-Object InstalledOn -Descending | 
            Select-Object -First 10
          
          foreach ($update in $updates) {
            Write-Host "  [$($update.InstalledOn.ToString('yyyy-MM-dd HH:mm:ss'))] $($update.HotFixID) - $($update.Description)"
          }
        } catch {
          Write-Host "  Unable to retrieve Windows updates"
        }
      register: software_installations_info
      changed_when: false

    - name: Get Recent User Activity
      win_shell: |
        Write-Host "=== RECENT USER ACTIVITY ==="
        
        $startTime = (Get-Date).AddHours(-24)
        
        # Check for recent user logins
        Write-Host "Recent User Logins:"
        try {
          $loginEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'Security'
            ID = 4624  # Successful logon
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 10
          
          foreach ($event in $loginEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] User login: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  Unable to retrieve login events"
        }
        
        Write-Host ""
        Write-Host "Recent User Logouts:"
        try {
          $logoutEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'Security'
            ID = 4634  # Logoff
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 10
          
          foreach ($event in $logoutEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] User logout: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  Unable to retrieve logout events"
        }
      register: user_activity_info
      changed_when: false

    - name: Get Recent Network Activity
      win_shell: |
        Write-Host "=== RECENT NETWORK ACTIVITY ==="
        
        # Check for recent network connections
        Write-Host "Recent Network Connections:"
        try {
          $connections = Get-NetTCPConnection -State Established | 
            Where-Object {$_.CreationTime -gt (Get-Date).AddHours(-24)} | 
            Sort-Object CreationTime -Descending | 
            Select-Object -First 15
          
          foreach ($conn in $connections) {
            $processName = "Unknown"
            try {
              $process = Get-Process -Id $conn.OwningProcess -ErrorAction SilentlyContinue
              if ($process) {
                $processName = $process.ProcessName
              }
            } catch {}
            
            Write-Host "  [$($conn.CreationTime.ToString('yyyy-MM-dd HH:mm:ss'))] $processName -> $($conn.RemoteAddress):$($conn.RemotePort)"
          }
        } catch {
          Write-Host "  Unable to retrieve network connections"
        }
        
        Write-Host ""
        Write-Host "Recent DNS Queries (if available):"
        try {
          $dnsEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'Microsoft-Windows-DNS-Client/Operational'
            StartTime = (Get-Date).AddHours(-24)
          } -ErrorAction SilentlyContinue | Select-Object -First 10
          
          foreach ($event in $dnsEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] DNS Query: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  DNS query logging not available"
        }
      register: network_activity_info
      changed_when: false

    - name: Get Recent Service Changes
      win_shell: |
        Write-Host "=== RECENT SERVICE CHANGES ==="
        
        # Check for recent service state changes
        $startTime = (Get-Date).AddHours(-24)
        
        Write-Host "Recent Service State Changes:"
        try {
          $serviceEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'System'
            ID = @(7036, 7040, 7041, 7042, 7043, 7044, 7045)  # Service events
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Select-Object -First 15
          
          foreach ($event in $serviceEvents) {
            Write-Host "  [$($event.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))] Service change: $($event.Message -replace "`n", " " -replace "`r", " ")"
          }
        } catch {
          Write-Host "  Unable to retrieve service events"
        }
        
        Write-Host ""
        Write-Host "Currently Running Services:"
        $runningServices = Get-Service | Where-Object {$_.Status -eq "Running"} | Sort-Object Name
        Write-Host "  Total running services: $($runningServices.Count)"
        $runningServices | Select-Object -First 10 | ForEach-Object {
          Write-Host "    $($_.Name): $($_.DisplayName)"
        }
      register: service_changes_info
      changed_when: false

    - name: Get Recent Process Changes
      win_shell: |
        Write-Host "=== RECENT PROCESS CHANGES ==="
        
        # Get currently running processes
        $currentProcesses = Get-Process | Select-Object Name, Id, StartTime | Sort-Object StartTime -Descending
        
        Write-Host "Recently Started Processes (Last 24 hours):"
        $startTime = (Get-Date).AddHours(-24)
        $recentProcesses = $currentProcesses | Where-Object {$_.StartTime -and $_.StartTime -gt $startTime} | Select-Object -First 15
        
        foreach ($process in $recentProcesses) {
          Write-Host "  [$($process.StartTime.ToString('yyyy-MM-dd HH:mm:ss'))] $($process.Name) (PID: $($process.Id))"
        }
        
        Write-Host ""
        Write-Host "Process Summary:"
        Write-Host "  Total running processes: $($currentProcesses.Count)"
        Write-Host "  Processes started in last 24h: $($recentProcesses.Count)"
      register: process_changes_info
      changed_when: false

    - name: Get System Configuration Changes
      win_shell: |
        Write-Host "=== SYSTEM CONFIGURATION CHANGES ==="
        
        $startTime = (Get-Date).AddHours(-24)
        
        # Check for system configuration changes
        Write-Host "Recent System Configuration Events:"
        try {
          $configEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'System'
            ID = @(6005, 6006, 6008, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 18
