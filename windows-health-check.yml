---
- name: Comprehensive VM Health Check
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: yes
  become: no
  
  tasks:
    # ========================================
    # SYSTEM OVERVIEW
    # ========================================
    - name: Get System Overview
      win_shell: |
        Write-Host "========================================"
        Write-Host "COMPREHENSIVE VM HEALTH CHECK"
        Write-Host "========================================"
        Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        Write-Host "Hostname: $env:COMPUTERNAME"
        Write-Host "OS Version: $((Get-WmiObject -Class Win32_OperatingSystem).Caption)"
        Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"
        Write-Host "========================================"
      register: system_overview
      changed_when: false

    - name: Display System Overview
      debug:
        msg: "{{ system_overview.stdout }}"

    # ========================================
    # CPU HEALTH
    # ========================================
    - name: Check CPU Health
      win_shell: |
        Write-Host "=== CPU HEALTH ASSESSMENT ==="
        
        # CPU Information
        $cpu = Get-WmiObject -Class Win32_Processor
        Write-Host "CPU Model: $($cpu.Name)"
        Write-Host "CPU Cores: $($cpu.NumberOfCores)"
        Write-Host "CPU Threads: $($cpu.NumberOfLogicalProcessors)"
        Write-Host "CPU Speed: $([math]::Round($cpu.MaxClockSpeed / 1000, 2)) GHz"
        
        # CPU Usage
        $cpuUsage = Get-Counter '\Processor(_Total)\% Processor Time' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
        Write-Host "Current CPU Usage: $([math]::Round($cpuUsage, 1))%"
        
        # CPU Load Assessment
        if ($cpuUsage -lt 50) {
          Write-Host "CPU Status: ✅ HEALTHY (Low usage)"
        } elseif ($cpuUsage -lt 80) {
          Write-Host "CPU Status: ⚠️ MODERATE (Medium usage)"
        } else {
          Write-Host "CPU Status: ❌ HIGH (High usage - potential bottleneck)"
        }
        
        # Processor Queue Length
        $queueLength = Get-Counter '\System\Processor Queue Length' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
        Write-Host "Processor Queue Length: $([math]::Round($queueLength, 2))"
        
        if ($queueLength -lt 2) {
          Write-Host "Queue Status: ✅ HEALTHY"
        } elseif ($queueLength -lt 10) {
          Write-Host "Queue Status: ⚠️ MODERATE"
        } else {
          Write-Host "Queue Status: ❌ HIGH (CPU bottleneck)"
        }
      register: cpu_health
      changed_when: false

    - name: Display CPU Health
      debug:
        msg: "{{ cpu_health.stdout }}"

    # ========================================
    # MEMORY HEALTH
    # ========================================
    - name: Check Memory Health
      win_shell: |
        Write-Host "=== MEMORY HEALTH ASSESSMENT ==="
        
        # Memory Information
        $memory = Get-WmiObject -Class Win32_ComputerSystem
        $totalRAM = [math]::Round($memory.TotalPhysicalMemory / 1GB, 2)
        Write-Host "Total RAM: ${totalRAM} GB"
        
        # Memory Usage
        $memoryInfo = Get-Counter '\Memory\Available MBytes' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
        $availableGB = [math]::Round($memoryInfo / 1024, 2)
        $usedGB = $totalRAM - $availableGB
        $memoryUsage = [math]::Round(($usedGB / $totalRAM) * 100, 1)
        
        Write-Host "Used RAM: ${usedGB} GB"
        Write-Host "Available RAM: ${availableGB} GB"
        Write-Host "Memory Usage: ${memoryUsage}%"
        
        # Memory Health Assessment
        if ($memoryUsage -lt 70) {
          Write-Host "Memory Status: ✅ HEALTHY"
        } elseif ($memoryUsage -lt 85) {
          Write-Host "Memory Status: ⚠️ MODERATE"
        } else {
          Write-Host "Memory Status: ❌ HIGH (Low available memory)"
        }
        
        # Page File Usage
        $pageFile = Get-Counter '\Paging File(_Total)\% Usage' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
        Write-Host "Page File Usage: $([math]::Round($pageFile, 1))%"
        
        if ($pageFile -lt 50) {
          Write-Host "Page File Status: ✅ HEALTHY"
        } elseif ($pageFile -lt 80) {
          Write-Host "Page File Status: ⚠️ MODERATE"
        } else {
          Write-Host "Page File Status: ❌ HIGH (Excessive paging)"
        }
      register: memory_health
      changed_when: false

    - name: Display Memory Health
      debug:
        msg: "{{ memory_health.stdout }}"

    # ========================================
    # DISK HEALTH (FIXED - NO LONG ARRAYS)
    # ========================================
    - name: Check Disk Health
      win_shell: |
        Write-Host "=== DISK HEALTH ASSESSMENT ==="
        
        # Get all disk drives
        $disks = Get-WmiObject -Class Win32_LogicalDisk | Where-Object {$_.DriveType -eq 3}
        
        foreach ($disk in $disks) {
          Write-Host "Drive: $($disk.DeviceID)"
          Write-Host "  Label: $($disk.VolumeName)"
          Write-Host "  File System: $($disk.FileSystem)"
          
          $totalGB = [math]::Round($disk.Size / 1GB, 2)
          $freeGB = [math]::Round($disk.FreeSpace / 1GB, 2)
          $usedGB = $totalGB - $freeGB
          $usagePercent = [math]::Round(($usedGB / $totalGB) * 100, 1)
          
          Write-Host "  Total Space: ${totalGB} GB"
          Write-Host "  Used Space: ${usedGB} GB"
          Write-Host "  Free Space: ${freeGB} GB"
          Write-Host "  Usage: ${usagePercent}%"
          
          # Disk Health Assessment
          if ($usagePercent -lt 80) {
            Write-Host "  Status: ✅ HEALTHY"
          } elseif ($usagePercent -lt 90) {
            Write-Host "  Status: ⚠️ MODERATE (Consider cleanup)"
          } else {
            Write-Host "  Status: ❌ CRITICAL (Low disk space)"
          }
        }
      register: disk_health
      changed_when: false

    - name: Display Disk Health
      debug:
        msg: "{{ disk_health.stdout }}"

    # ========================================
    # NETWORK HEALTH
    # ========================================
    - name: Check Network Health
      win_shell: |
        Write-Host "=== NETWORK HEALTH ASSESSMENT ==="
        
        # Network Interfaces
        $interfaces = Get-NetAdapter | Where-Object {$_.Status -eq "Up"}
        
        foreach ($interface in $interfaces) {
          Write-Host "Interface: $($interface.Name)"
          Write-Host "  Status: $($interface.Status)"
          Write-Host "  Speed: $($interface.LinkSpeed)"
          Write-Host "  MAC Address: $($interface.MacAddress)"
          
          # Get IP configuration
          $ipConfig = Get-NetIPAddress -InterfaceIndex $interface.ifIndex -AddressFamily IPv4 | Where-Object {$_.IPAddress -notlike "169.254.*"}
          if ($ipConfig) {
            Write-Host "  IP Address: $($ipConfig.IPAddress)"
            Write-Host "  Subnet Mask: $($ipConfig.PrefixLength)"
          }
        }
        
        # Network Connectivity Test
        Write-Host ""
        Write-Host "Network Connectivity:"
        try {
          $pingResult = Test-Connection -ComputerName "8.8.8.8" -Count 1 -Quiet
          if ($pingResult) {
            Write-Host "  Internet Connectivity: ✅ HEALTHY"
          } else {
            Write-Host "  Internet Connectivity: ❌ FAILED"
          }
        } catch {
          Write-Host "  Internet Connectivity: ❌ FAILED"
        }
      register: network_health
      changed_when: false

    - name: Display Network Health
      debug:
        msg: "{{ network_health.stdout }}"

    # ========================================
    # SERVICE HEALTH
    # ========================================
    - name: Check Service Health
      win_shell: |
        Write-Host "=== SERVICE HEALTH ASSESSMENT ==="
        
        # Critical Services
        $criticalServices = @(
          "WinRM",
          "Spooler",
          "Themes",
          "AudioSrv",
          "BITS",
          "CryptSvc",
          "DcomLaunch",
          "Dhcp",
          "Dnscache",
          "EventLog",
          "lanmanserver",
          "lanmanworkstation",
          "MpsSvc",
          "nsi",
          "RpcEptMapper",
          "RpcSs",
          "Schedule",
          "SENS",
          "SessionEnv",
          "ShellHWDetection",
          "Themes",
          "TrkWks",
          "W32Time",
          "WSearch",
          "wuauserv"
        )
        
        $failedServices = @()
        $stoppedServices = @()
        
        foreach ($serviceName in $criticalServices) {
          try {
            $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
            if ($service) {
              if ($service.Status -eq "Running") {
                Write-Host "  $serviceName : ✅ RUNNING"
              } elseif ($service.Status -eq "Stopped") {
                Write-Host "  $serviceName : ⚠️ STOPPED"
                $stoppedServices += $serviceName
              } else {
                Write-Host "  $serviceName : ❌ $($service.Status)"
                $failedServices += $serviceName
              }
            }
          } catch {
            Write-Host "  $serviceName : ❌ NOT FOUND"
            $failedServices += $serviceName
          }
        }
        
        Write-Host ""
        if ($stoppedServices.Count -gt 0) {
          Write-Host "⚠️ Stopped Services: $($stoppedServices -join ', ')"
        }
        if ($failedServices.Count -gt 0) {
          Write-Host "❌ Failed Services: $($failedServices -join ', ')"
        }
        if ($stoppedServices.Count -eq 0 -and $failedServices.Count -eq 0) {
          Write-Host "✅ All critical services are running properly"
        }
      register: service_health
      changed_when: false

    - name: Display Service Health
      debug:
        msg: "{{ service_health.stdout }}"

    # ========================================
    # SYSTEM UPTIME & PERFORMANCE
    # ========================================
    - name: Check System Uptime and Performance
      win_shell: |
        Write-Host "=== SYSTEM UPTIME & PERFORMANCE ==="
        
        # System Uptime
        $uptime = (Get-Date) - (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime
        $uptimeDays = [math]::Floor($uptime.TotalDays)
        $uptimeHours = [math]::Floor($uptime.TotalHours % 24)
        $uptimeMinutes = [math]::Floor($uptime.TotalMinutes % 60)
        
        Write-Host "System Uptime: ${uptimeDays} days, ${uptimeHours} hours, ${uptimeMinutes} minutes"
        
        # Uptime Assessment
        if ($uptimeDays -lt 7) {
          Write-Host "Uptime Status: ✅ HEALTHY (Recent restart)"
        } elseif ($uptimeDays -lt 30) {
          Write-Host "Uptime Status: ✅ HEALTHY (Normal uptime)"
        } elseif ($uptimeDays -lt 90) {
          Write-Host "Uptime Status: ⚠️ MODERATE (Long uptime - consider restart)"
        } else {
          Write-Host "Uptime Status: ❌ HIGH (Very long uptime - restart recommended)"
        }
        
        # System Performance
        Write-Host ""
        Write-Host "Performance Counters:"
        
        # Disk I/O
        $diskIO = Get-Counter '\PhysicalDisk(_Total)\% Disk Time' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
        Write-Host "  Disk I/O Usage: $([math]::Round($diskIO, 1))%"
        
        if ($diskIO -lt 50) {
          Write-Host "  Disk I/O Status: ✅ HEALTHY"
        } elseif ($diskIO -lt 80) {
          Write-Host "  Disk I/O Status: ⚠️ MODERATE"
        } else {
          Write-Host "  Disk I/O Status: ❌ HIGH (Disk bottleneck)"
        }
        
        # Context Switches
        $contextSwitches = Get-Counter '\System\Context Switches/sec' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
        Write-Host "  Context Switches/sec: $([math]::Round($contextSwitches, 0))"
        
        if ($contextSwitches -lt 10000) {
          Write-Host "  Context Switch Status: ✅ HEALTHY"
        } elseif ($contextSwitches -lt 50000) {
          Write-Host "  Context Switch Status: ⚠️ MODERATE"
        } else {
          Write-Host "  Context Switch Status: ❌ HIGH (High context switching)"
        }
      register: uptime_performance
      changed_when: false

    - name: Display System Uptime and Performance
      debug:
        msg: "{{ uptime_performance.stdout }}"

    # ========================================
    # FINAL HEALTH SUMMARY
    # ========================================
    - name: Generate Health Summary
      win_shell: |
        Write-Host "========================================"
        Write-Host "VM HEALTH CHECK SUMMARY"
        Write-Host "========================================"
        Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        Write-Host "Hostname: $env:COMPUTERNAME"
        Write-Host ""
        Write-Host "✅ HEALTHY - System is performing well"
        Write-Host "⚠️ MODERATE - Monitor closely, consider optimization"
        Write-Host "❌ CRITICAL - Immediate attention required"
        Write-Host ""
        Write-Host "========================================"
        Write-Host "Health check completed successfully!"
        Write-Host "========================================"
      register: health_summary
      changed_when: false

    - name: Display Health Summary
      debug:
        msg: "{{ health_summary.stdout }}"
